// <auto-generated />
using System;
using CZConnect.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230322112414_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CZConnect.Models.ApplicantForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantForms");
                });

            modelBuilder.Entity("CZConnect.Models.Referral", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("participantEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("participantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("registrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Referrals");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            participantEmail = "cmberge@avans.nl",
                            participantName = "Coen",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5360),
                            status = "Aangemeld"
                        },
                        new
                        {
                            id = 2L,
                            participantEmail = "m1@avans.nl",
                            participantName = "Marijn 1",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5435),
                            status = "Aangenomen"
                        },
                        new
                        {
                            id = 3L,
                            participantEmail = "m2@avans.nl",
                            participantName = "Marijn 2",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5442),
                            status = "Afgewezen"
                        },
                        new
                        {
                            id = 4L,
                            participantEmail = "jos@avans.nl",
                            participantName = "Jos",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5449),
                            status = "Aangemeld"
                        },
                        new
                        {
                            id = 5L,
                            participantEmail = "jedrek@avans.nl",
                            participantName = "Jedrek",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5455),
                            status = "Aangenomen"
                        },
                        new
                        {
                            id = 6L,
                            participantEmail = "wballeko@avans.nl",
                            participantName = "William",
                            registrationDate = new DateTime(2023, 3, 22, 12, 24, 13, 922, DateTimeKind.Local).AddTicks(5461),
                            status = "Afgewezen"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
